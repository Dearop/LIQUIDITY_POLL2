import e from "typescript";

import * as r from "@vue/compiler-dom";

import * as o from "@vue/language-core";

function* forEachEmbeddedCode(e) {
  yield e;
  if (e.embeddedCodes) {
    for (var r of e.embeddedCodes) {
      yield* forEachEmbeddedCode(r);
    }
  }
}

var i;

if ("VueVirtualCode" in o) {
  i = o.VueVirtualCode;
} else if ("VueGeneratedCode" in o) {
  i = o.VueGeneratedCode;
}

var d;

if ("getBasePlugins" in o) {
  d = o.getBasePlugins;
} else if ("getDefaultVueLanguagePlugins" in o) {
  d = o.getDefaultVueLanguagePlugins;
}

var t = o.resolveVueCompilerOptions({});

var a;

var transform = o => {
  if (!i || !d) {
    return;
  } else if (!a) {
    a = d({
      modules: {
        typescript: e,
        "@vue/compiler-dom": r
      },
      compilerOptions: {},
      globalTypesHolder: void 0,
      vueCompilerOptions: t
    });
  }
  var u = e.ScriptSnapshot.fromString(o.getFullText());
  var l = new i(o.fileName, "vue", u, t, a, ...[ e, !1 ]);
  for (var s of forEachEmbeddedCode(l)) {
    if (s.id.startsWith("script_")) {
      return s;
    }
  }
};

export { transform };
//# sourceMappingURL=vue-chunk.mjs.map
