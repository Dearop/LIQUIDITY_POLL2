{"version":3,"file":"vue-chunk.mjs","sources":["../../src/ts/transformers/vue.ts"],"sourcesContent":["import ts from 'typescript';\nimport type { VirtualCode } from '@vue/language-core';\nimport * as vueCompilerDOM from '@vue/compiler-dom';\nimport * as vue from '@vue/language-core';\n\nfunction* forEachEmbeddedCode(virtualCode: VirtualCode) {\n  yield virtualCode;\n  if (virtualCode.embeddedCodes) {\n    for (const embeddedCode of virtualCode.embeddedCodes) {\n      yield* forEachEmbeddedCode(embeddedCode);\n    }\n  }\n}\n\nlet VueVirtualCode: typeof vue.VueVirtualCode | undefined;\nif ('VueVirtualCode' in vue) {\n  VueVirtualCode = vue.VueVirtualCode;\n} else if ('VueGeneratedCode' in vue) {\n  VueVirtualCode = (vue as any).VueGeneratedCode;\n}\n\nlet getBasePlugins: typeof vue.getBasePlugins | undefined;\nif ('getBasePlugins' in vue) {\n  getBasePlugins = vue.getBasePlugins;\n} else if ('getDefaultVueLanguagePlugins' in vue) {\n  getBasePlugins = (vue as any).getDefaultVueLanguagePlugins;\n}\n\nconst vueCompilerOptions = vue.resolveVueCompilerOptions({});\n\nlet plugins: ReturnType<typeof vue.getBasePlugins> | undefined;\n\nexport const transform = (sourceFile: ts.SourceFile): VirtualCode | undefined => {\n  if (!VueVirtualCode || !getBasePlugins) {\n    return undefined;\n  } else if (!plugins) {\n    plugins = getBasePlugins({\n      modules: {\n        typescript: ts,\n        '@vue/compiler-dom': vueCompilerDOM,\n      },\n      compilerOptions: {},\n      globalTypesHolder: undefined,\n      vueCompilerOptions,\n    });\n  }\n\n  const snapshot = ts.ScriptSnapshot.fromString(sourceFile.getFullText());\n  const root = new VueVirtualCode(\n    sourceFile.fileName,\n    'vue',\n    snapshot,\n    vueCompilerOptions,\n    plugins,\n    ...([ts, false] as any as [typeof ts])\n  );\n  for (const code of forEachEmbeddedCode(root)) if (code.id.startsWith('script_')) return code;\n};\n"],"names":["forEachEmbeddedCode","virtualCode","embeddedCodes","embeddedCode","VueVirtualCode","vue","VueGeneratedCode","getBasePlugins","getDefaultVueLanguagePlugins","vueCompilerOptions","resolveVueCompilerOptions","plugins","transform","sourceFile","modules","typescript","ts","vueCompilerDOM","compilerOptions","globalTypesHolder","undefined","snapshot","ScriptSnapshot","fromString","getFullText","root","fileName","code","id","startsWith"],"mappings":";;;;;;AAKA,UAAUA,oBAAoBC;QACtBA;EACN,IAAIA,EAAYC;IACd,KAAK,IAAMC,KAAgBF,EAAYC;aAC9BF,oBAAoBG;;;AAGjC;;AAEA,IAAIC;;AACJ,IAAI,oBAAoBC;EACtBD,IAAiBC,EAAID;OAChB,IAAI,sBAAsBC;EAC/BD,IAAkBC,EAAYC;;;AAGhC,IAAIC;;AACJ,IAAI,oBAAoBF;EACtBE,IAAiBF,EAAIE;OAChB,IAAI,kCAAkCF;EAC3CE,IAAkBF,EAAYG;;;AAGhC,IAAMC,IAAqBJ,EAAIK,0BAA0B,CAAA;;AAEzD,IAAIC;;AAESC,IAAAA,YAAaC;EACxB,KAAKT,MAAmBG;IACtB;SACK,KAAKI;IACVA,IAAUJ,EAAe;MACvBO,SAAS;QACPC,YAAYC;QACZ,qBAAqBC;;MAEvBC,iBAAiB,CAAE;MACnBC,wBAAmBC;MACnBX;;;EAIJ,IAAMY,IAAWL,EAAGM,eAAeC,WAAWV,EAAWW;EACzD,IAAMC,IAAO,IAAIrB,EACfS,EAAWa,UACX,OACAL,GACAZ,GACAE,MACI,EAACK,IAAI;EAEX,KAAK,IAAMW,KAAQ3B,oBAAoByB;IAAO,IAAIE,EAAKC,GAAGC,WAAW;MAAY,OAAOF;;;AAAI;;"}