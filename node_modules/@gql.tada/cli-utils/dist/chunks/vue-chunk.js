var e = require("typescript");

var r = require("@vue/compiler-dom");

var t = require("@vue/language-core");

function _interopNamespaceDefault(e) {
  var r = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(t) {
      if ("default" !== t) {
        var a = Object.getOwnPropertyDescriptor(e, t);
        Object.defineProperty(r, t, a.get ? a : {
          enumerable: !0,
          get: function() {
            return e[t];
          }
        });
      }
    }));
  }
  r.default = e;
  return r;
}

var a = _interopNamespaceDefault(r);

var i = _interopNamespaceDefault(t);

function* forEachEmbeddedCode(e) {
  yield e;
  if (e.embeddedCodes) {
    for (var r of e.embeddedCodes) {
      yield* forEachEmbeddedCode(r);
    }
  }
}

var o;

if ("VueVirtualCode" in i) {
  o = i.VueVirtualCode;
} else if ("VueGeneratedCode" in i) {
  o = i.VueGeneratedCode;
}

var u;

if ("getBasePlugins" in i) {
  u = i.getBasePlugins;
} else if ("getDefaultVueLanguagePlugins" in i) {
  u = i.getDefaultVueLanguagePlugins;
}

var n = i.resolveVueCompilerOptions({});

var d;

exports.transform = r => {
  if (!o || !u) {
    return;
  } else if (!d) {
    d = u({
      modules: {
        typescript: e,
        "@vue/compiler-dom": a
      },
      compilerOptions: {},
      globalTypesHolder: void 0,
      vueCompilerOptions: n
    });
  }
  var t = e.ScriptSnapshot.fromString(r.getFullText());
  var i = new o(r.fileName, "vue", t, n, d, ...[ e, !1 ]);
  for (var l of forEachEmbeddedCode(i)) {
    if (l.id.startsWith("script_")) {
      return l;
    }
  }
};
//# sourceMappingURL=vue-chunk.js.map
